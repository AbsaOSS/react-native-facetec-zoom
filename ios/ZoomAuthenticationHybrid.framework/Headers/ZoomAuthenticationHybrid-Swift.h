// Generated by Apple Swift version 4.1.2 (swiftlang-902.0.54 clang-902.0.39.2)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR __attribute__((enum_extensibility(open)))
# else
#  define SWIFT_ENUM_ATTR
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import Foundation;
@import UIKit;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="ZoomAuthenticationHybrid",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

/// Represents the resolution options for the returned audit trail image(s)
typedef SWIFT_ENUM(NSInteger, AuditTrailType) {
/// Configures Zoom to disable returning audit trail images
  AuditTrailTypeDisabled = 0,
/// Configures Zoom to return the full resolution image for the audit trail
  AuditTrailTypeFullResolution = 1,
/// Configures Zoom to return an image of height 640 for the audit trail
  AuditTrailTypeHeight640 = 2,
};

/// Represents the options for the location of the back button
typedef SWIFT_ENUM(NSInteger, CancelButtonLocation) {
/// The back button will be located in the top left
  CancelButtonLocationTopLeft = 0,
/// The back button will be located in the top right
  CancelButtonLocationTopRight = 1,
/// The back button will be disabled
  CancelButtonLocationDisabled = 2,
};









@protocol ZoomSDKProtocol;

SWIFT_CLASS_NAMED("Zoom")
@interface Zoom : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) id <ZoomSDKProtocol> _Nonnull sdk;)
+ (id <ZoomSDKProtocol> _Nonnull)sdk SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// Represents the possible states of an authenticator after an authentication request
typedef SWIFT_ENUM(NSInteger, ZoomAuthenticatorState) {
/// The user was never shown this authenticator
  ZoomAuthenticatorStateUnused = 0,
/// The user attempted this authenticator, but cancelled before completing
  ZoomAuthenticatorStateCancelled = 1,
/// The user failed according to this authenticator
  ZoomAuthenticatorStateFailed = 2,
/// The user authenticated successfully according to this authenticator
  ZoomAuthenticatorStateCompleted = 3,
};

/// Represents the possible state of camera permissions.
typedef SWIFT_ENUM(NSInteger, ZoomCameraPermissionStatus) {
/// The user has not yet been asked for permission to use the camera
  ZoomCameraPermissionStatusNotDetermined = 0,
/// The user denied the app permission to use the camera or manually revoked the app’s camera permission.
/// From this state, permission can only be modified by the user from System ‘Settings’ context
  ZoomCameraPermissionStatusDenied = 1,
/// The camera permission on this device has been disabled due to policy.
/// From this state, permission can only be modified by the user from System ‘Settings’ context or contacting the system administrator.
  ZoomCameraPermissionStatusRestricted = 2,
/// The user granted permission to use the camera
  ZoomCameraPermissionStatusAuthorized = 3,
};

@class UIColor;
@class CAGradientLayer;
@class ZoomInstructions;

SWIFT_CLASS_NAMED("ZoomCustomization")
@interface ZoomCustomization : NSObject
@property (nonatomic) BOOL showZoomIntro;
@property (nonatomic) BOOL showPreEnrollmentScreen;
@property (nonatomic) BOOL showUserLockedScreen;
@property (nonatomic) BOOL showSuccessScreen;
@property (nonatomic) BOOL showFailureScreen;
@property (nonatomic, copy) NSArray<UIColor *> * _Nonnull mainBackgroundColors;
@property (nonatomic, strong) UIColor * _Nonnull mainForegroundColor;
@property (nonatomic, strong) UIColor * _Nonnull buttonTextNormalColor;
@property (nonatomic, strong) UIColor * _Nonnull buttonBackgroundNormalColor;
@property (nonatomic, strong) UIColor * _Nonnull buttonTextHighlightColor;
@property (nonatomic, strong) UIColor * _Nonnull buttonBackgroundHighlightColor;
@property (nonatomic, copy) NSArray<UIColor *> * _Nonnull resultsScreenBackgroundColor;
@property (nonatomic, strong) UIColor * _Nonnull resultsScreenForegroundColor;
@property (nonatomic, strong) CAGradientLayer * _Nonnull progressBarColor;
@property (nonatomic, strong) UIColor * _Nonnull progressTextColor;
@property (nonatomic, strong) UIColor * _Nonnull progressSpinnerColor1;
@property (nonatomic, strong) UIColor * _Nonnull progressSpinnerColor2;
@property (nonatomic, strong) UIColor * _Nonnull tabBackgroundColor;
@property (nonatomic, strong) UIColor * _Nonnull tabBackgroundSelectedColor;
@property (nonatomic, strong) UIColor * _Nonnull tabTextColor;
@property (nonatomic, strong) UIColor * _Nonnull tabTextSelectedColor;
@property (nonatomic, strong) UIColor * _Nonnull tabTextSuccessColor;
@property (nonatomic, strong) UIColor * _Nonnull tabBackgroundSuccessColor;
@property (nonatomic, strong) UIImage * _Nullable brandingLogo;
@property (nonatomic, strong) UIImage * _Nullable cancelButtonImage;
@property (nonatomic) enum CancelButtonLocation cancelButtonLocation;
@property (nonatomic, strong) ZoomInstructions * _Nonnull zoomInstructionsImages;
- (nonnull instancetype)init;
@end

/// Represents the possible results of comparing an external set of images to a ZoOm session for identification purposes
typedef SWIFT_ENUM(NSInteger, ZoomExternalImageSetVerificationResult) {
/// Matching against an external image set could not or was not performed
  ZoomExternalImageSetVerificationResultCouldNotDetermineMatch = 0,
/// Weak but possible match between the verification image set and the ZoOm session
  ZoomExternalImageSetVerificationResultLowConfidenceMatch = 1,
/// Strong match between the verification image set and the ZoOm session
  ZoomExternalImageSetVerificationResultMatch = 2,
};

enum ZoomLivenessResult : NSInteger;

/// Represents results of a Zoom face biometric comparison
SWIFT_CLASS_NAMED("ZoomFaceBiometricMetrics")
@interface ZoomFaceBiometricMetrics : NSObject
/// A sample of images capturing during the face analysis.  This parameter is nil unless ZoomSDK.auditTrailType is set to something other than Disabled
@property (nonatomic, readonly, copy) NSArray<UIImage *> * _Nullable auditTrail;
/// The liveness level detected during the zoom session
@property (nonatomic, readonly) enum ZoomLivenessResult livenessResult;
/// The liveness score detected during the zoom session
@property (nonatomic, readonly) float livenessScore;
/// Result of comparing external image set to the ZoOm enrollment session
@property (nonatomic, readonly) enum ZoomExternalImageSetVerificationResult externalImageSetVerificationResult;
/// ZoOm Hybrid Biometric Facemap
@property (nonatomic, readonly, copy) NSData * _Nullable zoomFacemap;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("ZoomInstructions")
@interface ZoomInstructions : NSObject
- (nonnull instancetype)initWithGenericImage:(UIImage * _Nullable)genericImage badLightingImage:(UIImage * _Nullable)badLightingImage badAngleImage:(UIImage * _Nullable)badAngleImage OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

/// Represents the estimated likilihood that the subject in the ZoOm session passes liveness check.
/// Low Liveness is indicative of spoof attacks or other attempts to fool the biometric verification system with physical objects which attempt to mimic the characteristics of the biometric (photographs, videos, masks etc) and/or poor environment for measuring liveness.
typedef SWIFT_ENUM(NSInteger, ZoomLivenessResult) {
  ZoomLivenessResultLivenessUndetermined = 0,
  ZoomLivenessResultAlive = 1,
};

enum ZoomSDKStatus : NSInteger;
@protocol ZoomVerificationDelegate;
@class UIViewController;

/// The ZoomSDKProtocol exposes methods the app can use to configure the behavior of Zoom.
SWIFT_PROTOCOL("_TtP24ZoomAuthenticationHybrid15ZoomSDKProtocol_")
@protocol ZoomSDKProtocol
/// initialize <em>must</em> be called at least once by the application before invoking any SDK operations.
/// This function may be called repeatedly without harm.
/// \param appToken Identifies the client for determination of license capabilities
///
/// \param completion Callback after api token validation has completed
///
- (void)initializeWithAppToken:(NSString * _Nonnull)appToken completion:(void (^ _Nullable)(BOOL))completion;
/// Configures the look and feel of Zoom.
- (void)setCustomizationWithInterfaceCustomization:(ZoomCustomization * _Nonnull)interfaceCustomization;
/// Convenience method to check if the zoom sdk client app token is valid.
/// ZoOm requires that the app successfully initializes the SDK and receives confirmation of a valid app token at least once before launching an enrollment or authentication.  After the initial validation, the SDK will allow a limited number of enrollments, or authentications without any further
/// requirement for successful round-trip connection to the ZoOm server. This allows the app to use ZoOm for a limited time without network connectivity.  During this ‘grace period’, the function will return ‘true’.
///
/// returns:
/// True, if the SDK license has been validated, false otherwise.
- (BOOL)isAppTokenValid SWIFT_WARN_UNUSED_RESULT;
- (enum ZoomSDKStatus)getStatus SWIFT_WARN_UNUSED_RESULT;
/// Preload FacialRecognition models – this can be used to reduce the amount of time it takes to initialize a
/// ZoomEnrollmentViewController or ZoomAuthenticationViewController.
/// You may want to call this function when transitioning to a ViewController in your application from which you intend to launch Zoom.
/// This insures that Zoom will launch as quickly as possible when requested.
- (void)preload;
/// Convenience method to check for camera permissions.
/// This function is used to check the camera permission status prior to using Zoom.  If camera permission has not been previously granted,
/// Zoom will display a UI asking the user to allow permission.  Some applications may wish to manage camera permission themselves - those applications
/// should verify camera permissions prior to transitioning to Zoom.
///
/// returns:
/// Value representing the current camera permission status
@property (nonatomic, readonly) enum ZoomCameraPermissionStatus cameraPermissionStatus;
/// Sets a prefered language to be used for all strings.
- (void)setLanguage:(NSString * _Nonnull)language;
/// If this property is set to true, then Zoom will include a sample of some of the camera frames collected during the enrollment/authentication process
/// on the Authentication/Enrollment response.
@property (nonatomic) BOOL auditTrailEnabled;
/// Sets the type of audit trail images to be collected.
/// If this property is not set to Disabled, then Zoom will include a sample of some of the camera frames collected during the enrollment/authentication process
/// on the Authentication/Enrollment response.
@property (nonatomic) enum AuditTrailType auditTrailType;
/// Sets the time in seconds before a timeout occurs the enrollment/verification/authentication process.
/// This value has to be between 30 and 60 seconds. If it’s lower than 30 or higher than 60, it
/// will be defaulted to 30 or 60 respectively.
@property (nonatomic) NSInteger activeTimeoutInSeconds;
/// Fetches the version number of the current Zoom SDK release
///
/// returns:
/// version number of sdk release package
@property (nonatomic, readonly, copy) NSString * _Nonnull version;
/// Set the encryption key to be used for ZoOm Hybrid facemaps
/// \param publicKey RSA public key to be used in PEM format
///
- (void)setHybridEncryptionKeyWithPublicKey:(NSString * _Nonnull)publicKey;
/// Configures and returns a new UIViewController for a verification session.
/// Caller should call presentViewController on returned object only once.
/// \param delegate The delegate on which the application wishes to receive status results from the Verification
///
/// \param retrieveZoomBiometric Whether to return ZoOm biometric data
///
- (UIViewController * _Nonnull)createVerificationVCWithDelegate:(id <ZoomVerificationDelegate> _Nonnull)delegate retrieveZoomBiometric:(BOOL)retrieveZoomBiometric SWIFT_WARN_UNUSED_RESULT;
@end

/// Represents the status of the SDK
typedef SWIFT_ENUM(NSInteger, ZoomSDKStatus) {
/// Initialize was never attempted
  ZoomSDKStatusNeverInitialized = 0,
/// The app token provided was verified
  ZoomSDKStatusInitialized = 1,
/// The app token could not be verified
  ZoomSDKStatusNetworkIssues = 2,
/// The app token provided was invalid
  ZoomSDKStatusInvalidToken = 3,
/// The current version of the SDK is deprecated
  ZoomSDKStatusVersionDeprecated = 4,
/// The app token needs to be verified again
  ZoomSDKStatusOfflineSessionsExceeded = 5,
/// An unknown error occurred
  ZoomSDKStatusUnknownError = 6,
};

@class ZoomVerificationResult;

/// Applications should implement this delegate to receive results from a ZoomVerificaiton UIViewController.
/// The method on this delegate will be called exactly once after the Zoom Session has completed
SWIFT_PROTOCOL_NAMED("ZoomVerificationDelegate")
@protocol ZoomVerificationDelegate
- (void)onZoomVerificationResultWithResult:(ZoomVerificationResult * _Nonnull)result;
@optional
/// Set callback function to be called when ZoOm is
/// about to be dismissed
- (void)onBeforeDismiss;
@end

enum ZoomVerificationStatus : NSInteger;

/// Represents results of a Zoom Verification Request
SWIFT_CLASS_NAMED("ZoomVerificationResult")
@interface ZoomVerificationResult : NSObject
/// Indicates whether the enrollment succeeded or the cause of failure
@property (nonatomic, readonly) enum ZoomVerificationStatus status;
/// Metrics collected during face enrollment
@property (nonatomic, readonly, strong) ZoomFaceBiometricMetrics * _Nullable faceMetrics;
/// Number of full sessions (both retry and success) that the user performed from the time ZoOm was invoked to the time control is handed back to the application.
@property (nonatomic, readonly) NSInteger countOfZoomSessionsPerformed;
/// Unique id for a ZoOm session
@property (nonatomic, readonly, copy) NSString * _Nonnull sessionId;
/// Friendly representation of result object
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end

/// Represents the various end states of a verification session
typedef SWIFT_ENUM(NSInteger, ZoomVerificationStatus) {
/// The user was successfully processed.
  ZoomVerificationStatusUserProcessedSuccessfully = 0,
/// The user was not processed successuflly.
  ZoomVerificationStatusUserNotProcessed = 1,
/// The user prematurely cancelled out of the enrollment session
  ZoomVerificationStatusFailedBecauseUserCancelled = 2,
/// The operation could not be completed because the SDK was not validated prior to use.
  ZoomVerificationStatusFailedBecauseAppTokenNotValid = 3,
/// The camera access is prevented by user setting
  ZoomVerificationStatusFailedBecauseCameraPermissionDeniedByUser = 4,
/// The camera access is prevented by administrator policy
  ZoomVerificationStatusFailedBecauseCameraPermissionDeniedByAdministrator = 5,
/// Verification was terminated due to the app being terminated or put to sleep
  ZoomVerificationStatusFailedBecauseOfOSContextSwitch = 6,
/// Verification failed due to user exceeding the timeout limit
  ZoomVerificationStatusFailedBecauseOfTimeout = 7,
/// Verification failed due to low memory
  ZoomVerificationStatusFailedBecauseOfLowMemory = 8,
/// An error occurred while writing the biometric to disk – this most likely occurs if user device storage is full
  ZoomVerificationStatusFailedBecauseOfDiskWriteError = 9,
/// Verification failed because there was no network connection in development mode
  ZoomVerificationStatusFailedBecauseNoConnectionInDevMode = 10,
/// Verification failed because too many sessions have occurred since the AppToken was last validated
  ZoomVerificationStatusFailedBecauseOfflineSessionsExceeded = 11,
/// Verification failed because the Zoom Hybrid encryption key is required but not set correctly.
  ZoomVerificationStatusFailedBecauseEncryptionKeyInvalid = 12,
};

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
